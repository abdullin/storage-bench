// automatically generated by the FlatBuffers compiler, do not modify

package bench

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BinItem struct {
	_tab flatbuffers.Struct
}

func (rcv *BinItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BinItem) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *BinItem) ItemID() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *BinItem) MutateItemID(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *BinItem) ShipmentID() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *BinItem) MutateShipmentID(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *BinItem) Count() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *BinItem) MutateCount(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *BinItem) Type() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(20))
}
func (rcv *BinItem) MutateType(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(20), n)
}

func CreateBinItem(builder *flatbuffers.Builder, ItemID uint64, ShipmentID uint64, Count uint32, Type byte) flatbuffers.UOffsetT {
	builder.Prep(8, 24)
	builder.Pad(3)
	builder.PrependByte(Type)
	builder.PrependUint32(Count)
	builder.PrependUint64(ShipmentID)
	builder.PrependUint64(ItemID)
	return builder.Offset()
}
