// automatically generated by the FlatBuffers compiler, do not modify

package bench

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Bin struct {
	_tab flatbuffers.Table
}

func GetRootAsBin(buf []byte, offset flatbuffers.UOffsetT) *Bin {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Bin{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Bin) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Bin) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Bin) Items(obj *BinItem, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 24
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Bin) ItemsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Bin) Type() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Bin) MutateType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Bin) Flags() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Bin) MutateFlags(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Bin) Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Bin) Subtype() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Bin) MutateSubtype(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *Bin) SaleID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Bin) MutateSaleID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func BinStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func BinAddItems(builder *flatbuffers.Builder, Items flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Items), 0)
}
func BinStartItemsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(24, numElems, 8)
}
func BinAddType(builder *flatbuffers.Builder, Type byte) {
	builder.PrependByteSlot(1, Type, 0)
}
func BinAddFlags(builder *flatbuffers.Builder, Flags byte) {
	builder.PrependByteSlot(2, Flags, 0)
}
func BinAddCode(builder *flatbuffers.Builder, Code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Code), 0)
}
func BinAddSubtype(builder *flatbuffers.Builder, Subtype uint32) {
	builder.PrependUint32Slot(4, Subtype, 0)
}
func BinAddSaleID(builder *flatbuffers.Builder, SaleID uint64) {
	builder.PrependUint64Slot(5, SaleID, 0)
}
func BinEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
