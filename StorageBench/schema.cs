// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public enum ItemType : byte
{
 Undefined = 0,
 Bin = 1,
 Box = 2,
 Product = 3,
 Kit = 4,
 Container = 5,
};

public struct BinItem : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BinItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ItemType Type { get { return (ItemType)__p.bb.Get(__p.bb_pos + 0); } }
  public void MutateType(ItemType Type) { __p.bb.Put(__p.bb_pos + 0, (byte)Type); }
  public ulong ItemID { get { return __p.bb.GetUlong(__p.bb_pos + 8); } }
  public void MutateItemID(ulong ItemID) { __p.bb.PutUlong(__p.bb_pos + 8, ItemID); }
  public uint Count { get { return __p.bb.GetUint(__p.bb_pos + 16); } }
  public void MutateCount(uint Count) { __p.bb.PutUint(__p.bb_pos + 16, Count); }

  public static Offset<BinItem> CreateBinItem(FlatBufferBuilder builder, ItemType Type, ulong ItemID, uint Count) {
    builder.Prep(8, 24);
    builder.Pad(4);
    builder.PutUint(Count);
    builder.PutUlong(ItemID);
    builder.Pad(7);
    builder.PutByte((byte)Type);
    return new Offset<BinItem>(builder.Offset);
  }
};

public struct Bin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Bin GetRootAsBin(ByteBuffer _bb) { return GetRootAsBin(_bb, new Bin()); }
  public static Bin GetRootAsBin(ByteBuffer _bb, Bin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Bin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ItemType Type { get { int o = __p.__offset(4); return o != 0 ? (ItemType)__p.bb.Get(o + __p.bb_pos) : ItemType.Undefined; } }
  public bool MutateType(ItemType Type) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)Type); return true; } else { return false; } }
  public BinItem? Bins(int j) { int o = __p.__offset(6); return o != 0 ? (BinItem?)(new BinItem()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int BinsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Bin> CreateBin(FlatBufferBuilder builder,
      ItemType Type = ItemType.Undefined,
      VectorOffset BinsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Bin.AddBins(builder, BinsOffset);
    Bin.AddType(builder, Type);
    return Bin.EndBin(builder);
  }

  public static void StartBin(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, ItemType Type) { builder.AddByte(0, (byte)Type, 0); }
  public static void AddBins(FlatBufferBuilder builder, VectorOffset BinsOffset) { builder.AddOffset(1, BinsOffset.Value, 0); }
  public static void StartBinsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static Offset<Bin> EndBin(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Bin>(o);
  }
};

